<4/3/24=17:04>
playlist : https://www.youtube.com/playlist?list=PLC3y8-rFHvwh8shCMHFA5kWxD9PaPwxaY


Introduction:
============
->Node.js is an open-source, cross-platform, JavaScript runtime environment.

why?
====
->Build end-to-end(from frontend->backend) JS applications.

->Community support.

Course Structure:
=================

1.Terms and concepts to understand what is node.js.
2.Modules(user defined)
3.Built-in Modules
4.Node.js internals
5.NPM
6.CLI tool.
7.Miscellaneous

ECMA Script:
============

History:
=======
->Netscape created JS.

->ECMA-262 is the language specification.

->ECMAScript is the language that implements ECMA-262.

->JS is basically ECMAScript at its core but builds on top of that.

Chrome V8 Engine:
================

->JS can't be directly understood by the computer. so we use js engine to convert js to machine code.

->Js engine is created by browser vendors.

Eg:
    ->V8 -Opensource Google chrome , latest edge
    ->SpiderMonkey - Firefox
    ->JavaScript Core - developed by apple for safari.
    ->Chakra - JS engine for original edge.

=>v8 is opensource.
->It implements ecma script.
->created using c++ and can be embedded in any c++ applications.

=>By embedding v8 into your own c++ application, you can write c++ code that gets executed when a user writes javascript code.

=>You can add new features to JavaScript itself.

For ex:
    ->features that are available in c++ like file handling,network but not available in js. can be implemented by using own c++ code on top of v8 engine.(i.e ., node.js on top of v8 engine)

JavaScript Runtime:
===================
->An environment which provides all the necessary components in order to use and run a js program.
->Js engine is just a component in js runtime.
components:
1.JS engine:
|-->Memory(heap to store variable data);
|-->Call stack(where js code executed)
2.Web/browser APIs.
|-->DOM,Storage,Timers(setTimeout,setInterval)
3.Queue are places where async function wait for to be executed.
4.Event loop->Ensures that async tasks are executed in correct order.

Queue:
->Microtask queue.
->Callback queue.

*.All async operations are pushed into either of these queues.
->Microtask queue will have promises,mutual observers and it has higher priority than callback queue.

->Callback queue will have other async functions like setTimeout, setInterval.

->Event loop is the one which checks these queue based on their priority and pushes them to call stack for execution.

Ref: Dia1.jpg

What is Node.js?:
================ 

->Node.js is an open-source, cross-platform JavaScript runtime environment.

Opensource- Publicly available.

Cross Platform - available on Mac, Windows and Linux.

JavaScript runtime environment - provides all the necessary components in order to use and run a javascript program outside the browser.

what can you build with node.js:
================================

->Due to node js, the js can be run outside the browser which in turn opened up the possibilities,

=>Traditional Websites,
=>Backend Services like APIs.
=>Real-time applications.
=>Streaming services.
=>CLI tools.
=>Multiplayer games.

nodejs repo: github.com/nodejs/node

Node JS runtime :
refer: dia2.jpg

=>It can execute not only the standard ecmascript language but also new features that are made available throught c++ bindings using the v8 engine.

=>It consists of c++ files which form the core features and js files which expose common utilities and someof the c++ features for easier consumption.

Executing JavaScript with Node:
===============================

1.Node REPL=  Interactive session by typing node and enter on terminal.
->Read
->Evaluate
->Print
->loop
2.Create a .js file and run it in terminal:
node filename.js

Browser vs Node.js:
==================

->In the browser, most of the time what you are doing is interacting with the DOM, or other web platform APIs like cookies. You don't have the document, window and all the other objects that are provided by the browser.

->In browser, we don't have all the nice APIs that node.js provides through its modules. For example, the filesystem access functionality.

->With node.js, you control the environment.
E.g : we can know es6 support based on node version.

->With a browser, you are at the mercy of the what the users choose..E.g:internet explorer usage by user.

<5/3/24:10:50>

Modules:
=======
->A module is an encapsulated and reusable chunk of code that has its own context.
->In Node.js, each file is treated as a separate module.

Types of Modules:
=================

1.Local Modules - Modules that we create in our application.

2.Built-in modules - Modules that Node.js ships with out of the box.

3.Third party modules - Modules written by other developers that we can use in our application.

Local Modules:
==============
->Modules that we create and use in our application.

Common Js:
==========

->Common Js is a standard that states how a module should be structured and shared.

->These are the original way to package Javascript code for node.js;

->In node.js, each file is different module.

Steps:
=====

->In the source(original func), export the functions using the exports.func_name;
Refer:ex2.js

->In the inherit place, use .require('./filename.js') and inherit them as a variable.e.g:circle

->Use this variable, to access all the functions in the source like circle.area(),circle.circumference();

refer:ex1.js

Implementation of class in a module/ class as a Common file module:
==================================

->Use module.exports for the source.
->create a new object for the class in destination.
->use that for the calc in class.
refer:square.js and ex3.js
-----------------------------

module.exports={function 1, function2};->we can use it like this too;

--------------------------------

Module Scope:
=============

=>Each file is a separate module. Each file can have the same variable and it won't result in conflict.

=>Node.js will wrap each file with a IIFE. so the variable will have module scope.

Module Wrapper:
==============

=>IIFE is the one which wraps every module and it contains 5 parameters;
They are,
    ->__filename
    ->__dirname
    ->require
    ->exports
    ->module


->dirname: current path/folder of the current module.
->filename: path to current file.
->require: import a module by path.
->Module: reference to current module.

we can use this in every module.

Module Caching:
===============

=>Module caching is the process of storing/remembering the previously imported module.
=>Suppose if a file imports a module twice, 
require(module);
some changes
require(module);
print();

=>The changes from the first import is shown after even the second import because a file caches the module which it imports.

refer:ex6,ex7.js

Ways to export and require:
==========================
1.module.exports=add;
2.module.exports = {add:addition,subs:subtraction };
here add is the one, we have used in require in another file.
addition is the function used in the same file.
3.module.exports.add
4.exports.add=(next topic)
5.destructing in the destination;

Module.exports vs exports:
=========================

=>Module.exports is a reference to exports.
=> A module only exports module.exports;

=>when we use exports.add, it is referenced or implemented as module.exports.add, so the module exports this.

=>Generally we export multiple items as an object,
module.exports={add,sub};//this works;
but if we use,
exports={add,sub}//this won't work;

=>Because, exports is created as a new object literal with add,sub value; but the module file only exports module.exports.
=>when importing using require, it imports a empty item.

sol: we can work around like this,
 
ES Modules:
==========

why es modules?
->when node.js introduced , there was no built in module system. so node.js defaulted to commonJs module system.
->In es6, js have introduced es module system.

->export and import keyword,default export.
->the extension of the module file for ejs should be '.mjs'.

Importing JSON as module:
=========================
 
1.Importing a json file is same as normal common js module but the require will convert the .json to normal js object.

watch mode:
==========
syntax: node --watch filename

->If there is anychange to file, the file will be executed again.
refer:ex10.js

commonJs vs esm:
->esm can't have imported in a conditional block but common js can do that.
->esm is async where is common js is sync.

->cjs is runtime and can use .require anywhere in the code.

->esm modules should be imported in the top and they are also hoisted to the top.

Global object:
=============

In JavaScript, the global object is an object that exists in the global scope and acts as the container for all global variables, functions, and properties. In web browsers, the global object is usually the window object, while in Node.js environments, it's often referred to as global.

The global object provides access to various built-in functions and properties, such as:

Global functions like setTimeout(), setInterval(), and console.log().
Global properties like NaN, Infinity, and undefined.
Constructors like Array, String, and Object.

